% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gh_create_weekly_old_and_new_boards.R
\name{gh_create_weekly_old_and_new_boards}
\alias{gh_create_weekly_old_and_new_boards}
\title{Create a weekly issues summary for GitHub}
\usage{
gh_create_weekly_old_and_new_boards(
  date_min,
  date_max,
  user,
  repo,
  board_url,
  new_board = TRUE,
  regex_done = "close|closed|done",
  regex_validation = "a valider|validation",
  regex_blocked = "blocked|bloque|bloqu\\\\\\\\u00e9",
  regex_inprogress =
    "in progress|en cours|review|revision|r\\\\\\\\u00e9vision|r\\\\\\\\u00e9-validation",
  regex_ready = "ready|pret|pr\\\\\\\\u00eat",
  github_token = Sys.getenv("GITHUB_PAT"),
  verbose = FALSE
)
}
\arguments{
\item{date_min}{Minimal date to look for issues}

\item{date_max}{Maximal date to look for issues}

\item{user}{username or company name as shown on GitHub}

\item{repo}{GitHub repository}

\item{board_url}{url of the GitHub board. If using the "classic" board, which is deprecated by GitHub, you may want to use this url: \code{glue("/repos/{user}/{repo}/projects")}
otherwise you may want to use this kind of url: \code{"https://github.com/orgs/myorganization/projects/someprojectnumber/" }
Please not this not mandatory if you are setting \code{new_board = FALSE} since \code{board_url} can be guessed from \code{user} and \code{repo}}

\item{new_board}{logical. Are you working with the classic board or the new board.}

\item{regex_done}{Regular expression to detect labels for issues done by developers (and potentially awaiting validation by clients)}

\item{regex_validation}{Regular expression to detect labels for issues waiting for validation}

\item{regex_blocked}{Regular expression to detect labels for issues blocked (and potentially awaiting information by clients)}

\item{regex_inprogress}{Regular expression to detect labels for issues in progress (and potentially awaiting review by lead dev.)}

\item{regex_ready}{Regular expression to detect labels for issues ready (and potentially reorder by lead dev.)}

\item{github_token}{token access to github API (read:project scope is required for the new github board).}

\item{verbose}{Logical. Whether to return output in the console too.}
}
\value{
A Weekly to copy-paste in a Wiki and a tibble
}
\description{
Create a weekly issues summary for GitHub
}
\examples{
\dontrun{
user <- "ThinkR-open"
repo <- "example-weekly"
date_min <- "2022-06-30"
date_max <- "2022-06-30"
board_url_old <- glue::glue("/repos/{user}/{repo}/projects")
board_url_new <- "https://github.com/orgs/ThinkR-open/projects/4/"

# old board
weekly_old <- gh_create_weekly_old_and_new_boards(
  date_min = date_min,
  date_max = date_max,
  user = user,
  repo = repo,
  board_url = board_url_old,
  new_board = FALSE,
  verbose = FALSE
)
cat(weekly_old$weekly_info)

# clipr::write_clip(weekly_old$weekly_info)


# new board
weekly_new <- gh_create_weekly_old_and_new_boards(
  date_min = date_min,
  date_max = date_max,
  user = user,
  repo = repo,
  board_url = board_url_new,
  github_token = Sys.getenv("GITHUB_PAT"),
  new_board = TRUE,
  verbose = FALSE
)
cat(weekly_new$weekly_info)
# clipr::write_clip(weekly_new$weekly_info)

}
}
